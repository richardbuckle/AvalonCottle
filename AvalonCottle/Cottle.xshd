<?xml version="1.0"?>
<SyntaxDefinition name="Cottle" xmlns="http://icsharpcode.net/sharpdevelop/syntaxdefinition/2008">
  <!-- Documentation: 
  <http://avalonedit.net/documentation/> 
  <https://www.codeproject.com/Articles/42490/Using-AvalonEdit-WPF-Text-Editor?msg=4879049#xx4879049xx> 
  -->
  
  <!-- TODO find the best way to set these colors at runtime -->
  <Color name ="Body text" foreground="DarkSlateGray"/>
  <Color name="Comment" foreground="Green" fontStyle="italic"/>
  <Color name="Code" foreground="Purple"/>
  <Color name="Keyword" foreground="MediumVioletRed"/>
  <Color name="Operator" foreground="SlateBlue" fontWeight="bold"/>
  <Color name="Delimiter" foreground="Blue" fontWeight="bold"/>
  <Color name="Literals" foreground="Firebrick"/>
  <Color name="Built-in functions" foreground="MediumOrchid"/>
  <Color name="EDDI functions" foreground="DodgerBlue"/>
  <Color name="EDDI properties" foreground="LightSeaGreen"/>

  <!-- This is the main ruleset. -->
  <RuleSet>
    <!-- escape sequences -->
    <Span begin="\\" end="."/>

    <!-- comments -->
    <Span color="Comment" multiline="true" begin="{_" end="}"/>

    <!-- code -->
    <Span color="Code" fontFamily="Consolas" multiline="true">
      <Begin color="Delimiter">{</Begin>
      <End color="Delimiter">}</End>
      <RuleSet>

        <Span color="Comment" multiline="true" begin="{_" end="}"/>

        <Rule color="Delimiter">
          [{|:}]
        </Rule>

        <!-- String literals are treated as body text and reference this file's main ruleset -->
        <Span color="Body text" ruleSet="">
          <Begin color="Delimiter">"</Begin>
          <End color="Delimiter">"</End>
        </Span>

        <!-- Same for single-quoted strings -->
        <Span color="Body text" ruleSet="">
          <Begin color="Delimiter">'</Begin>
          <End color="Delimiter">'</End>
        </Span>

        <!--if|elif|else naive rule TODO improve this -->
        <Rule>
          if foo .* elif .* else .*
        </Rule>

        <Keywords color="Keyword">
          <Word>if</Word>
          <Word>elif</Word>
          <Word>else</Word>
          <Word>for</Word>
          <Word>while</Word>
          <Word>empty:</Word>
          <Word>in</Word>
          <Word>set</Word>
          <Word>to</Word>
          <!-- etc... -->
        </Keywords>

        <Keywords color="Operator">
          <Word>+</Word>
          <Word>-</Word>
          <Word>*</Word>
          <Word>/</Word>
          <Word>%</Word>
          <Word>&amp;&amp;</Word>
          <Word>||</Word>
          <Word>&lt;</Word>
          <Word>&gt;</Word>
        </Keywords>

        <!-- Digits -->
        <Rule color="Literals">
          (    \d+(\.[0-9]+)?   #number with optional floating point
          |    \.[0-9]+         #or just starting with floating point
          )
        </Rule>

        <!-- Other literals-->
        <Keywords color="Literals">
          <Word>true</Word>
          <Word>false</Word>
          <Word>void</Word>
        </Keywords>

        <Keywords color="Built-in functions">
          <Word>len</Word>
          <Word>max</Word>
          <Word>min</Word>
          <Word>cat</Word>
          <!-- etc... -->
        </Keywords>

        <Keywords color="EDDI functions">
          <Word>SetState</Word>
          <Word>Humanise</Word>
          <Word>Occasionally</Word>
          <Word>OneOf</Word>
          <Word>P</Word>
          <!-- etc... -->
        </Keywords>

        <Keywords color="EDDI properties">
          <Word>event</Word>
          <Word>rewards</Word>
          <Word>faction</Word>
          <Word>orbitalperiod</Word>
          <Word>stellarclass</Word>
          <!-- etc... -->
        </Keywords>

      </RuleSet>
    </Span>

  </RuleSet>
</SyntaxDefinition>
