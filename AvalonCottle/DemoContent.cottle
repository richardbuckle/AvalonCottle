{_ Welcome to AvalonEdit! Use Ctrl+F to search and dot to demo text completion.}

{_ Context }
{SetState('eddi_context_last_subject', 'data_voucher')}

Keywords like void, if and else have no meaning in body text.
Literals like 2.3 and keywords like else are not colored in body text.

You can use either {mymap.f1} or {mymap["f2"]} notations for map values.

{_ A comment can backslash-escape \|, \{, \} and \\ }
{ _ White space is allowed between the opening brace and the underscore.}

{dump("Double-quoted string with \"escape\" codes can use 'single' quotes.")}
{dump('Single-quoted string with \'escape\' codes can use "double" quotes.')}
{dump("String literals
can be multi-line.")}

{set ultimateAnswer to 42}
{set approximateAnswer to 42.0001}
{set x to true}
{set dictionary to ["a": "Alpha", "b": "Bravo"]}
{if 1 is true or "a" is void: yay |elif a is b: meh |else: nay} is the verdict.

{set reportPlanetTypes to [
    "Earth-like world": true,
    "Gas giant with ammonia based life": false,
]}


{_ if doesn't end on || }
{if 1 || 2: yes {void} |elif 3: maybe |else: no } and body text.
{_ regardless of whitespace }
{if 1||2:yes {void}|elif 3:maybe|else:no} and body text.

{_ test a compound if}
{if x < 3 : less than three 
  |elif x > 10 : 
  {if x > 50: an army of |else: rather many} 
  |else: a troop of
} mulefas.

{_ test for loops}
{for index, text in messages:
    Message #{index + 1}: {text}
|empty:
    Result: {when(false, "no message", "error {error.text}")}
}

{_ test function assignment}
{set f() to : 
body text 
    {
        code
    }
}

{declare variable as 42}
{declare by_items(a, b) as:
    {return cmp(len(split(b, ",")), len(split(a, ",")))}
}

{_ test Custom function name}
{Humanise(event.amount)} credits

{_ test Custom function name}
{if singular: voucher |else: vouchers} for {Humanise(event.amount)} credits

{_ test coloring of nested if statements}
{if len(event.rewards) = 1 && len(event.rewards[0].faction) > 0:
  {P(event.rewards[0].faction)}
|else:
  {if len(event.rewards[0].faction) > 0:
     {while cur < len(event.rewards):
        {if cur = 0:
        |elif cur < len(event.rewards) - 1:
            , 
        |else:
            and
        }
     }
  }
}

{_ issue #9: greedy matching of delimiters}
{if recommendOtherMapping || false: 
    {Pause(1500)}
    {F("Bodies to map")}
}

{_ issue #10: incorrectly highlighting keywords within words }
{set zforz to void}
{set zinz to void}
{set zwhilez to void}
{set zifz to void}

{_ None of this should be body text}
{if true:
    {if true: 
        {set f1() to: {test}}
    }
|elif false:
    {if true: 
        {set f1() to: {test2}}
    }
|else:
    {if true: 
        {set f1() to: {test3}}
    }
}

{_ Arbitrary nesting of code blocks is a syntax error}
{{echo 42}}
